// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ds.proto

#ifndef PROTOBUF_ds_2eproto__INCLUDED
#define PROTOBUF_ds_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace ds {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ds_2eproto();
void protobuf_AssignDesc_ds_2eproto();
void protobuf_ShutdownFile_ds_2eproto();

class SetTemplate;
class UpdateScreen;
class Evaluate;
class Request;

// ===================================================================

class SetTemplate : public ::google::protobuf::Message {
 public:
  SetTemplate();
  virtual ~SetTemplate();
  
  SetTemplate(const SetTemplate& from);
  
  inline SetTemplate& operator=(const SetTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetTemplate& default_instance();
  
  void Swap(SetTemplate* other);
  
  // implements Message ----------------------------------------------
  
  SetTemplate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetTemplate& from);
  void MergeFrom(const SetTemplate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 screen = 1;
  inline bool has_screen() const;
  inline void clear_screen();
  static const int kScreenFieldNumber = 1;
  inline ::google::protobuf::int32 screen() const;
  inline void set_screen(::google::protobuf::int32 value);
  
  // required string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // @@protoc_insertion_point(class_scope:ds.SetTemplate)
 private:
  inline void set_has_screen();
  inline void clear_has_screen();
  inline void set_has_path();
  inline void clear_has_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  ::google::protobuf::int32 screen_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_2eproto();
  friend void protobuf_AssignDesc_ds_2eproto();
  friend void protobuf_ShutdownFile_ds_2eproto();
  
  void InitAsDefaultInstance();
  static SetTemplate* default_instance_;
};
// -------------------------------------------------------------------

class UpdateScreen : public ::google::protobuf::Message {
 public:
  UpdateScreen();
  virtual ~UpdateScreen();
  
  UpdateScreen(const UpdateScreen& from);
  
  inline UpdateScreen& operator=(const UpdateScreen& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateScreen& default_instance();
  
  void Swap(UpdateScreen* other);
  
  // implements Message ----------------------------------------------
  
  UpdateScreen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateScreen& from);
  void MergeFrom(const UpdateScreen& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 screen = 1;
  inline bool has_screen() const;
  inline void clear_screen();
  static const int kScreenFieldNumber = 1;
  inline ::google::protobuf::int32 screen() const;
  inline void set_screen(::google::protobuf::int32 value);
  
  // required string container = 2;
  inline bool has_container() const;
  inline void clear_container();
  static const int kContainerFieldNumber = 2;
  inline const ::std::string& container() const;
  inline void set_container(const ::std::string& value);
  inline void set_container(const char* value);
  inline void set_container(const char* value, size_t size);
  inline ::std::string* mutable_container();
  inline ::std::string* release_container();
  
  // required string path = 3;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 3;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // @@protoc_insertion_point(class_scope:ds.UpdateScreen)
 private:
  inline void set_has_screen();
  inline void clear_has_screen();
  inline void set_has_container();
  inline void clear_has_container();
  inline void set_has_path();
  inline void clear_has_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* container_;
  ::std::string* path_;
  ::google::protobuf::int32 screen_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_2eproto();
  friend void protobuf_AssignDesc_ds_2eproto();
  friend void protobuf_ShutdownFile_ds_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateScreen* default_instance_;
};
// -------------------------------------------------------------------

class Evaluate : public ::google::protobuf::Message {
 public:
  Evaluate();
  virtual ~Evaluate();
  
  Evaluate(const Evaluate& from);
  
  inline Evaluate& operator=(const Evaluate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Evaluate& default_instance();
  
  void Swap(Evaluate* other);
  
  // implements Message ----------------------------------------------
  
  Evaluate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Evaluate& from);
  void MergeFrom(const Evaluate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 screen = 1;
  inline bool has_screen() const;
  inline void clear_screen();
  static const int kScreenFieldNumber = 1;
  inline ::google::protobuf::int32 screen() const;
  inline void set_screen(::google::protobuf::int32 value);
  
  // required string js = 2;
  inline bool has_js() const;
  inline void clear_js();
  static const int kJsFieldNumber = 2;
  inline const ::std::string& js() const;
  inline void set_js(const ::std::string& value);
  inline void set_js(const char* value);
  inline void set_js(const char* value, size_t size);
  inline ::std::string* mutable_js();
  inline ::std::string* release_js();
  
  // @@protoc_insertion_point(class_scope:ds.Evaluate)
 private:
  inline void set_has_screen();
  inline void clear_has_screen();
  inline void set_has_js();
  inline void clear_has_js();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* js_;
  ::google::protobuf::int32 screen_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_2eproto();
  friend void protobuf_AssignDesc_ds_2eproto();
  friend void protobuf_ShutdownFile_ds_2eproto();
  
  void InitAsDefaultInstance();
  static Evaluate* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();
  
  Request(const Request& from);
  
  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();
  
  void Swap(Request* other);
  
  // implements Message ----------------------------------------------
  
  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ds.SetTemplate set_template = 1;
  inline bool has_set_template() const;
  inline void clear_set_template();
  static const int kSetTemplateFieldNumber = 1;
  inline const ::ds::SetTemplate& set_template() const;
  inline ::ds::SetTemplate* mutable_set_template();
  inline ::ds::SetTemplate* release_set_template();
  
  // optional .ds.UpdateScreen update_screen = 2;
  inline bool has_update_screen() const;
  inline void clear_update_screen();
  static const int kUpdateScreenFieldNumber = 2;
  inline const ::ds::UpdateScreen& update_screen() const;
  inline ::ds::UpdateScreen* mutable_update_screen();
  inline ::ds::UpdateScreen* release_update_screen();
  
  // optional .ds.Evaluate evaluate = 3;
  inline bool has_evaluate() const;
  inline void clear_evaluate();
  static const int kEvaluateFieldNumber = 3;
  inline const ::ds::Evaluate& evaluate() const;
  inline ::ds::Evaluate* mutable_evaluate();
  inline ::ds::Evaluate* release_evaluate();
  
  // @@protoc_insertion_point(class_scope:ds.Request)
 private:
  inline void set_has_set_template();
  inline void clear_has_set_template();
  inline void set_has_update_screen();
  inline void clear_has_update_screen();
  inline void set_has_evaluate();
  inline void clear_has_evaluate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ds::SetTemplate* set_template_;
  ::ds::UpdateScreen* update_screen_;
  ::ds::Evaluate* evaluate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ds_2eproto();
  friend void protobuf_AssignDesc_ds_2eproto();
  friend void protobuf_ShutdownFile_ds_2eproto();
  
  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// ===================================================================


// ===================================================================

// SetTemplate

// required int32 screen = 1;
inline bool SetTemplate::has_screen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetTemplate::set_has_screen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetTemplate::clear_has_screen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetTemplate::clear_screen() {
  screen_ = 0;
  clear_has_screen();
}
inline ::google::protobuf::int32 SetTemplate::screen() const {
  return screen_;
}
inline void SetTemplate::set_screen(::google::protobuf::int32 value) {
  set_has_screen();
  screen_ = value;
}

// required string path = 2;
inline bool SetTemplate::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetTemplate::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetTemplate::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetTemplate::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& SetTemplate::path() const {
  return *path_;
}
inline void SetTemplate::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void SetTemplate::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void SetTemplate::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetTemplate::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* SetTemplate::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UpdateScreen

// required int32 screen = 1;
inline bool UpdateScreen::has_screen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateScreen::set_has_screen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateScreen::clear_has_screen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateScreen::clear_screen() {
  screen_ = 0;
  clear_has_screen();
}
inline ::google::protobuf::int32 UpdateScreen::screen() const {
  return screen_;
}
inline void UpdateScreen::set_screen(::google::protobuf::int32 value) {
  set_has_screen();
  screen_ = value;
}

// required string container = 2;
inline bool UpdateScreen::has_container() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateScreen::set_has_container() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateScreen::clear_has_container() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateScreen::clear_container() {
  if (container_ != &::google::protobuf::internal::kEmptyString) {
    container_->clear();
  }
  clear_has_container();
}
inline const ::std::string& UpdateScreen::container() const {
  return *container_;
}
inline void UpdateScreen::set_container(const ::std::string& value) {
  set_has_container();
  if (container_ == &::google::protobuf::internal::kEmptyString) {
    container_ = new ::std::string;
  }
  container_->assign(value);
}
inline void UpdateScreen::set_container(const char* value) {
  set_has_container();
  if (container_ == &::google::protobuf::internal::kEmptyString) {
    container_ = new ::std::string;
  }
  container_->assign(value);
}
inline void UpdateScreen::set_container(const char* value, size_t size) {
  set_has_container();
  if (container_ == &::google::protobuf::internal::kEmptyString) {
    container_ = new ::std::string;
  }
  container_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateScreen::mutable_container() {
  set_has_container();
  if (container_ == &::google::protobuf::internal::kEmptyString) {
    container_ = new ::std::string;
  }
  return container_;
}
inline ::std::string* UpdateScreen::release_container() {
  clear_has_container();
  if (container_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = container_;
    container_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string path = 3;
inline bool UpdateScreen::has_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateScreen::set_has_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateScreen::clear_has_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateScreen::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& UpdateScreen::path() const {
  return *path_;
}
inline void UpdateScreen::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void UpdateScreen::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void UpdateScreen::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateScreen::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* UpdateScreen::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Evaluate

// required int32 screen = 1;
inline bool Evaluate::has_screen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Evaluate::set_has_screen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Evaluate::clear_has_screen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Evaluate::clear_screen() {
  screen_ = 0;
  clear_has_screen();
}
inline ::google::protobuf::int32 Evaluate::screen() const {
  return screen_;
}
inline void Evaluate::set_screen(::google::protobuf::int32 value) {
  set_has_screen();
  screen_ = value;
}

// required string js = 2;
inline bool Evaluate::has_js() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Evaluate::set_has_js() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Evaluate::clear_has_js() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Evaluate::clear_js() {
  if (js_ != &::google::protobuf::internal::kEmptyString) {
    js_->clear();
  }
  clear_has_js();
}
inline const ::std::string& Evaluate::js() const {
  return *js_;
}
inline void Evaluate::set_js(const ::std::string& value) {
  set_has_js();
  if (js_ == &::google::protobuf::internal::kEmptyString) {
    js_ = new ::std::string;
  }
  js_->assign(value);
}
inline void Evaluate::set_js(const char* value) {
  set_has_js();
  if (js_ == &::google::protobuf::internal::kEmptyString) {
    js_ = new ::std::string;
  }
  js_->assign(value);
}
inline void Evaluate::set_js(const char* value, size_t size) {
  set_has_js();
  if (js_ == &::google::protobuf::internal::kEmptyString) {
    js_ = new ::std::string;
  }
  js_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Evaluate::mutable_js() {
  set_has_js();
  if (js_ == &::google::protobuf::internal::kEmptyString) {
    js_ = new ::std::string;
  }
  return js_;
}
inline ::std::string* Evaluate::release_js() {
  clear_has_js();
  if (js_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = js_;
    js_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Request

// optional .ds.SetTemplate set_template = 1;
inline bool Request::has_set_template() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_set_template() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_set_template() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_set_template() {
  if (set_template_ != NULL) set_template_->::ds::SetTemplate::Clear();
  clear_has_set_template();
}
inline const ::ds::SetTemplate& Request::set_template() const {
  return set_template_ != NULL ? *set_template_ : *default_instance_->set_template_;
}
inline ::ds::SetTemplate* Request::mutable_set_template() {
  set_has_set_template();
  if (set_template_ == NULL) set_template_ = new ::ds::SetTemplate;
  return set_template_;
}
inline ::ds::SetTemplate* Request::release_set_template() {
  clear_has_set_template();
  ::ds::SetTemplate* temp = set_template_;
  set_template_ = NULL;
  return temp;
}

// optional .ds.UpdateScreen update_screen = 2;
inline bool Request::has_update_screen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_update_screen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_update_screen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_update_screen() {
  if (update_screen_ != NULL) update_screen_->::ds::UpdateScreen::Clear();
  clear_has_update_screen();
}
inline const ::ds::UpdateScreen& Request::update_screen() const {
  return update_screen_ != NULL ? *update_screen_ : *default_instance_->update_screen_;
}
inline ::ds::UpdateScreen* Request::mutable_update_screen() {
  set_has_update_screen();
  if (update_screen_ == NULL) update_screen_ = new ::ds::UpdateScreen;
  return update_screen_;
}
inline ::ds::UpdateScreen* Request::release_update_screen() {
  clear_has_update_screen();
  ::ds::UpdateScreen* temp = update_screen_;
  update_screen_ = NULL;
  return temp;
}

// optional .ds.Evaluate evaluate = 3;
inline bool Request::has_evaluate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_evaluate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_evaluate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_evaluate() {
  if (evaluate_ != NULL) evaluate_->::ds::Evaluate::Clear();
  clear_has_evaluate();
}
inline const ::ds::Evaluate& Request::evaluate() const {
  return evaluate_ != NULL ? *evaluate_ : *default_instance_->evaluate_;
}
inline ::ds::Evaluate* Request::mutable_evaluate() {
  set_has_evaluate();
  if (evaluate_ == NULL) evaluate_ = new ::ds::Evaluate;
  return evaluate_;
}
inline ::ds::Evaluate* Request::release_evaluate() {
  clear_has_evaluate();
  ::ds::Evaluate* temp = evaluate_;
  evaluate_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ds

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ds_2eproto__INCLUDED
