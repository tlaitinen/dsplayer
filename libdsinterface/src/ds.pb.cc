// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ds {

namespace {

const ::google::protobuf::Descriptor* SetTemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTemplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateScreen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateScreen_reflection_ = NULL;
const ::google::protobuf::Descriptor* Evaluate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Evaluate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ds_2eproto() {
  protobuf_AddDesc_ds_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ds.proto");
  GOOGLE_CHECK(file != NULL);
  SetTemplate_descriptor_ = file->message_type(0);
  static const int SetTemplate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTemplate, screen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTemplate, path_),
  };
  SetTemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTemplate_descriptor_,
      SetTemplate::default_instance_,
      SetTemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTemplate));
  UpdateScreen_descriptor_ = file->message_type(1);
  static const int UpdateScreen_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateScreen, screen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateScreen, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateScreen, path_),
  };
  UpdateScreen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateScreen_descriptor_,
      UpdateScreen::default_instance_,
      UpdateScreen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateScreen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateScreen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateScreen));
  Evaluate_descriptor_ = file->message_type(2);
  static const int Evaluate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evaluate, screen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evaluate, js_),
  };
  Evaluate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Evaluate_descriptor_,
      Evaluate::default_instance_,
      Evaluate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evaluate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Evaluate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Evaluate));
  Request_descriptor_ = file->message_type(3);
  static const int Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, set_template_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, update_screen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, evaluate_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ds_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTemplate_descriptor_, &SetTemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateScreen_descriptor_, &UpdateScreen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Evaluate_descriptor_, &Evaluate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ds_2eproto() {
  delete SetTemplate::default_instance_;
  delete SetTemplate_reflection_;
  delete UpdateScreen::default_instance_;
  delete UpdateScreen_reflection_;
  delete Evaluate::default_instance_;
  delete Evaluate_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
}

void protobuf_AddDesc_ds_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010ds.proto\022\002ds\"+\n\013SetTemplate\022\016\n\006screen\030"
    "\001 \002(\005\022\014\n\004path\030\002 \002(\t\"\?\n\014UpdateScreen\022\016\n\006s"
    "creen\030\001 \002(\005\022\021\n\tcontainer\030\002 \002(\t\022\014\n\004path\030\003"
    " \002(\t\"&\n\010Evaluate\022\016\n\006screen\030\001 \002(\005\022\n\n\002js\030\002"
    " \002(\t\"y\n\007Request\022%\n\014set_template\030\001 \001(\0132\017."
    "ds.SetTemplate\022\'\n\rupdate_screen\030\002 \001(\0132\020."
    "ds.UpdateScreen\022\036\n\010evaluate\030\003 \001(\0132\014.ds.E"
    "valuate", 287);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ds.proto", &protobuf_RegisterTypes);
  SetTemplate::default_instance_ = new SetTemplate();
  UpdateScreen::default_instance_ = new UpdateScreen();
  Evaluate::default_instance_ = new Evaluate();
  Request::default_instance_ = new Request();
  SetTemplate::default_instance_->InitAsDefaultInstance();
  UpdateScreen::default_instance_->InitAsDefaultInstance();
  Evaluate::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ds_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ds_2eproto {
  StaticDescriptorInitializer_ds_2eproto() {
    protobuf_AddDesc_ds_2eproto();
  }
} static_descriptor_initializer_ds_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SetTemplate::kScreenFieldNumber;
const int SetTemplate::kPathFieldNumber;
#endif  // !_MSC_VER

SetTemplate::SetTemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetTemplate::InitAsDefaultInstance() {
}

SetTemplate::SetTemplate(const SetTemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetTemplate::SharedCtor() {
  _cached_size_ = 0;
  screen_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTemplate::~SetTemplate() {
  SharedDtor();
}

void SetTemplate::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void SetTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTemplate_descriptor_;
}

const SetTemplate& SetTemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_2eproto();  return *default_instance_;
}

SetTemplate* SetTemplate::default_instance_ = NULL;

SetTemplate* SetTemplate::New() const {
  return new SetTemplate;
}

void SetTemplate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    screen_ = 0;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 screen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_)));
          set_has_screen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 screen = 1;
  if (has_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->screen(), output);
  }
  
  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetTemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 screen = 1;
  if (has_screen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->screen(), target);
  }
  
  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetTemplate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 screen = 1;
    if (has_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen());
    }
    
    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetTemplate::MergeFrom(const SetTemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_screen()) {
      set_screen(from.screen());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTemplate::CopyFrom(const SetTemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTemplate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SetTemplate::Swap(SetTemplate* other) {
  if (other != this) {
    std::swap(screen_, other->screen_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTemplate_descriptor_;
  metadata.reflection = SetTemplate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateScreen::kScreenFieldNumber;
const int UpdateScreen::kContainerFieldNumber;
const int UpdateScreen::kPathFieldNumber;
#endif  // !_MSC_VER

UpdateScreen::UpdateScreen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateScreen::InitAsDefaultInstance() {
}

UpdateScreen::UpdateScreen(const UpdateScreen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateScreen::SharedCtor() {
  _cached_size_ = 0;
  screen_ = 0;
  container_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateScreen::~UpdateScreen() {
  SharedDtor();
}

void UpdateScreen::SharedDtor() {
  if (container_ != &::google::protobuf::internal::kEmptyString) {
    delete container_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void UpdateScreen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateScreen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateScreen_descriptor_;
}

const UpdateScreen& UpdateScreen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_2eproto();  return *default_instance_;
}

UpdateScreen* UpdateScreen::default_instance_ = NULL;

UpdateScreen* UpdateScreen::New() const {
  return new UpdateScreen;
}

void UpdateScreen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    screen_ = 0;
    if (has_container()) {
      if (container_ != &::google::protobuf::internal::kEmptyString) {
        container_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateScreen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 screen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_)));
          set_has_screen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_container;
        break;
      }
      
      // required string container = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->container().data(), this->container().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }
      
      // required string path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateScreen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 screen = 1;
  if (has_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->screen(), output);
  }
  
  // required string container = 2;
  if (has_container()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container().data(), this->container().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->container(), output);
  }
  
  // required string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateScreen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 screen = 1;
  if (has_screen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->screen(), target);
  }
  
  // required string container = 2;
  if (has_container()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container().data(), this->container().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->container(), target);
  }
  
  // required string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateScreen::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 screen = 1;
    if (has_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen());
    }
    
    // required string container = 2;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->container());
    }
    
    // required string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateScreen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateScreen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateScreen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateScreen::MergeFrom(const UpdateScreen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_screen()) {
      set_screen(from.screen());
    }
    if (from.has_container()) {
      set_container(from.container());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateScreen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateScreen::CopyFrom(const UpdateScreen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateScreen::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void UpdateScreen::Swap(UpdateScreen* other) {
  if (other != this) {
    std::swap(screen_, other->screen_);
    std::swap(container_, other->container_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateScreen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateScreen_descriptor_;
  metadata.reflection = UpdateScreen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Evaluate::kScreenFieldNumber;
const int Evaluate::kJsFieldNumber;
#endif  // !_MSC_VER

Evaluate::Evaluate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Evaluate::InitAsDefaultInstance() {
}

Evaluate::Evaluate(const Evaluate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Evaluate::SharedCtor() {
  _cached_size_ = 0;
  screen_ = 0;
  js_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Evaluate::~Evaluate() {
  SharedDtor();
}

void Evaluate::SharedDtor() {
  if (js_ != &::google::protobuf::internal::kEmptyString) {
    delete js_;
  }
  if (this != default_instance_) {
  }
}

void Evaluate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Evaluate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Evaluate_descriptor_;
}

const Evaluate& Evaluate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_2eproto();  return *default_instance_;
}

Evaluate* Evaluate::default_instance_ = NULL;

Evaluate* Evaluate::New() const {
  return new Evaluate;
}

void Evaluate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    screen_ = 0;
    if (has_js()) {
      if (js_ != &::google::protobuf::internal::kEmptyString) {
        js_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Evaluate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 screen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_)));
          set_has_screen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_js;
        break;
      }
      
      // required string js = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_js:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_js()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->js().data(), this->js().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Evaluate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 screen = 1;
  if (has_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->screen(), output);
  }
  
  // required string js = 2;
  if (has_js()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->js().data(), this->js().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->js(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Evaluate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 screen = 1;
  if (has_screen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->screen(), target);
  }
  
  // required string js = 2;
  if (has_js()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->js().data(), this->js().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->js(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Evaluate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 screen = 1;
    if (has_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen());
    }
    
    // required string js = 2;
    if (has_js()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->js());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Evaluate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Evaluate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Evaluate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Evaluate::MergeFrom(const Evaluate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_screen()) {
      set_screen(from.screen());
    }
    if (from.has_js()) {
      set_js(from.js());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Evaluate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Evaluate::CopyFrom(const Evaluate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Evaluate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Evaluate::Swap(Evaluate* other) {
  if (other != this) {
    std::swap(screen_, other->screen_);
    std::swap(js_, other->js_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Evaluate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Evaluate_descriptor_;
  metadata.reflection = Evaluate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kSetTemplateFieldNumber;
const int Request::kUpdateScreenFieldNumber;
const int Request::kEvaluateFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
  set_template_ = const_cast< ::ds::SetTemplate*>(&::ds::SetTemplate::default_instance());
  update_screen_ = const_cast< ::ds::UpdateScreen*>(&::ds::UpdateScreen::default_instance());
  evaluate_ = const_cast< ::ds::Evaluate*>(&::ds::Evaluate::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  set_template_ = NULL;
  update_screen_ = NULL;
  evaluate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete set_template_;
    delete update_screen_;
    delete evaluate_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ds_2eproto();  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_set_template()) {
      if (set_template_ != NULL) set_template_->::ds::SetTemplate::Clear();
    }
    if (has_update_screen()) {
      if (update_screen_ != NULL) update_screen_->::ds::UpdateScreen::Clear();
    }
    if (has_evaluate()) {
      if (evaluate_ != NULL) evaluate_->::ds::Evaluate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ds.SetTemplate set_template = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_template()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_update_screen;
        break;
      }
      
      // optional .ds.UpdateScreen update_screen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_screen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_screen()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_evaluate;
        break;
      }
      
      // optional .ds.Evaluate evaluate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_evaluate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_evaluate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ds.SetTemplate set_template = 1;
  if (has_set_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->set_template(), output);
  }
  
  // optional .ds.UpdateScreen update_screen = 2;
  if (has_update_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->update_screen(), output);
  }
  
  // optional .ds.Evaluate evaluate = 3;
  if (has_evaluate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->evaluate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ds.SetTemplate set_template = 1;
  if (has_set_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->set_template(), target);
  }
  
  // optional .ds.UpdateScreen update_screen = 2;
  if (has_update_screen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->update_screen(), target);
  }
  
  // optional .ds.Evaluate evaluate = 3;
  if (has_evaluate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->evaluate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ds.SetTemplate set_template = 1;
    if (has_set_template()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_template());
    }
    
    // optional .ds.UpdateScreen update_screen = 2;
    if (has_update_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_screen());
    }
    
    // optional .ds.Evaluate evaluate = 3;
    if (has_evaluate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->evaluate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_set_template()) {
      mutable_set_template()->::ds::SetTemplate::MergeFrom(from.set_template());
    }
    if (from.has_update_screen()) {
      mutable_update_screen()->::ds::UpdateScreen::MergeFrom(from.update_screen());
    }
    if (from.has_evaluate()) {
      mutable_evaluate()->::ds::Evaluate::MergeFrom(from.evaluate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  
  if (has_set_template()) {
    if (!this->set_template().IsInitialized()) return false;
  }
  if (has_update_screen()) {
    if (!this->update_screen().IsInitialized()) return false;
  }
  if (has_evaluate()) {
    if (!this->evaluate().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(set_template_, other->set_template_);
    std::swap(update_screen_, other->update_screen_);
    std::swap(evaluate_, other->evaluate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ds

// @@protoc_insertion_point(global_scope)
